name: User Service CI/CD Pipeline

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop

env:
  SERVICE_NAME: user-service
  JAVA_VERSION: '21'
  GRADLE_VERSION: '8.13'

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./user-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
          cache-read-only: ${{ github.ref != 'refs/heads/master' && github.ref != 'refs/heads/develop' }}
          cache-cleanup: on-success

      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/daemon
            user-service/.gradle/caches
            user-service/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('user-service/**/*.gradle*', 'user-service/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            ${{ runner.os }}-gradle-${{ hashFiles('user-service/**/*.gradle*') }}
            ${{ runner.os }}-gradle-wrapper-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Download dependencies
        run: ./gradlew dependencies --no-daemon
        env:
          GRADLE_OPTS: "-Dorg.gradle.caching=true -Dorg.gradle.parallel=true"

      - name: Run tests with coverage
        run: ./gradlew test jacocoTestReport --no-daemon
        env:
          SPRING_PROFILES_ACTIVE: test
          GRADLE_OPTS: "-Dorg.gradle.caching=true -Dorg.gradle.parallel=true"

      - name: Build application
        run: ./gradlew build -x test --no-daemon
        env:
          GRADLE_OPTS: "-Dorg.gradle.caching=true -Dorg.gradle.parallel=true"

      - name: Generate test report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Results
          path: user-service/build/test-results/test/TEST-*.xml
          reporter: java-junit

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: user-service/build/test-results/

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: user-service/build/reports/jacoco/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifacts
          path: user-service/build/libs/*.jar
          retention-days: 1

  # Job 2: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    defaults:
      run:
        working-directory: ./user-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          gradle-version: ${{ env.GRADLE_VERSION }}
          cache-read-only: true
          cache-cleanup: on-success

      - name: Cache Gradle Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/daemon
            user-service/.gradle/caches
            user-service/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('user-service/**/*.gradle*', 'user-service/**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
            ${{ runner.os }}-gradle-${{ hashFiles('user-service/**/*.gradle*') }}
            ${{ runner.os }}-gradle-wrapper-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Download dependencies for security scan
        run: ./gradlew dependencies --no-daemon
        env:
          GRADLE_OPTS: "-Dorg.gradle.caching=true -Dorg.gradle.parallel=true"

      - name: Run dependency vulnerability scan
        run: ./gradlew dependencyCheckAnalyze --no-daemon
        continue-on-error: true
        env:
          GRADLE_OPTS: "-Dorg.gradle.caching=true -Dorg.gradle.parallel=true"

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: user-service/build/reports/

  # Job 3: Build and Push Docker Image
  docker-build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    defaults:
      run:
        working-directory: ./user-service

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./user-service
          file: ./user-service/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=local,src=/tmp/.buildx-cache
            type=gha
          cache-to: |
            type=local,dest=/tmp/.buildx-cache-new,mode=max
            type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 4: Deploy to Staging (Optional)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying ${{ env.SERVICE_NAME }} to staging environment"
          echo "Image: ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:develop-${{ github.sha }}"
          # Add your staging deployment logic here
          # For example: kubectl, docker-compose, or cloud provider CLI commands

  # Job 5: Deploy to Production (Optional)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying ${{ env.SERVICE_NAME }} to production environment"
          echo "Image: ${{ secrets.DOCKER_USERNAME }}/${{ env.SERVICE_NAME }}:latest"
          # Add your production deployment logic here
          # For example: kubectl, docker-compose, or cloud provider CLI commands

  # Job 6: Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Clean up old Docker images
        run: |
          echo "Cleaning up old Docker images and artifacts"
          # Add cleanup logic here if needed